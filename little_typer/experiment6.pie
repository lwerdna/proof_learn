#lang pie

; drop-first-k, technique #1

; takes three arguments:
; input: vector from which elements will be dropped
;     k: amount to drop
;    l2: vector end length (after drop)
;
; NB: the input vector length is implied in (+ k l2)

;------------------------------------------------------------------------------
; <STANDARD_INCLUDES>
;------------------------------------------------------------------------------
(claim +
    (-> Nat Nat
        Nat))
(define +
    (lambda (a b)
        (rec-Nat a
            b
            (lambda (_ subresult) (add1 subresult)))))

;------------------------------------------------------------------------------
; </STANDARD_INCLUDES>
;------------------------------------------------------------------------------

(claim drop-first-k-motive
    (-> U Nat Nat U))
(define drop-first-k-motive
    (lambda (T l2 i)
        (-> (Vec T (+ l2 i))
            (Vec T l2)
        )))
'--------------------------------test-drop-first-k-motive
(drop-first-k-motive Atom 3 0) ; when result length 3, type at 0th step
(drop-first-k-motive Atom 3 1) ; when result length 3, type at 1st step
(drop-first-k-motive Atom 3 2) ; when result length 3, type at 2nd step

(claim drop-first-k-step
    (Pi ((T U) (l2 Nat) (i Nat))
        (-> (drop-first-k-motive T l2 i)
            (drop-first-k-motive T l2 (add1 i))
        )))
(define drop-first-k-step
    (lambda (T l2 i)
        (lambda (subfunction)
            (lambda (input)
                (subfunction
                    (tail input))
            ))))
--------------------------------drop-first-k-step
;(drop-first-k-step Atom 10


