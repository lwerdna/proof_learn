#lang pie

(claim sub1
    (-> Nat Nat))
(define sub1
    (lambda (x)
        (which-Nat x
            0
            (lambda (k) k))))

(check-same Nat (sub1 5) 4)
(check-same Nat (sub1 1) 0)
(check-same Nat (sub1 0) 0)

(claim -
    (-> Nat Nat
        Nat))
(define -
    (lambda (a b)
        (iter-Nat b
            a
            sub1)))

(claim Pear
    U)
(define Pear
    (Pair Nat Nat))

; (a,b) -> (a-1, b-1)
(claim sub1pear
    (-> Pear
        Pear))
(define sub1pear
    (lambda (x)
        (cons (sub1 (car x)) (sub1 (cdr x)))))

(check-same Pear (cons 2 3) (sub1pear (cons 3 4)))
(check-same Pear (cons 0 3) (sub1pear (cons 1 4)))
(check-same Pear (cons 0 3) (sub1pear (cons 0 4)))
(check-same Pear (cons 9 0) (sub1pear (cons 10 1)))
(check-same Pear (cons 9 0) (sub1pear (cons 10 0)))
(check-same Pear (cons 27 33) (sub1pear (cons 28 34)))

;
; (:: 1 (:: 2 (:: 3 nil)))
; (:: 0 (:: 1 (:: 2 (:: 3 nil))))

; Since nil is a (List Atom) and a (List Nat) and a (List x),
; how can we tell Pie which one we intend when supplying it to a function needing a base case?
;
; if we put just nil, Pie responds "Can't determine a type"

; technique #1: use "the" type hint:

(claim incr-list
    (-> (List Nat)
        (List Nat)
    )
)
(define incr-list
    (lambda (input)
        (rec-List input
            (the (List Nat) nil)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list (:: 1 (:: 2 (:: 3 nil))))

; technique #2: use a function that returns an empty list of the type we want:

(claim make-empty-list
    (Pi ((E U))
        (List E)))
(define make-empty-list
    (lambda (E)
        nil))

(claim incr-list2
    (-> (List Nat)
        (List Nat)
    )
)
(define incr-list2
    (lambda (input)
        (rec-List input
            (make-empty-list Nat)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list2 (:: 1 (:: 2 (:: 3 nil))))

;------------------------------------------------------------------------------
; ch6: Precisely How Many?
;------------------------------------------------------------------------------

; all type constructors we've seen so far take another type as a parameter:
;     (Pair Atom Nat)
;     (List Atom)
; but now they can take non-type stuff, like values of Nat

(the (Vec Atom 1) (vec:: 'A vecnil))
(the (Vec Atom 2) (vec:: 'A (vec:: 'B vecnil)))
(the (Vec Atom 3) (vec:: 'A (vec:: 'B (vec:: 'C vecnil))))

(claim first-of-one
    (Pi ((E U))
        (-> (Vec E 1)
            E)))
(define first-of-one
    (lambda (E v)
        (head v)))

(first-of-one Atom (vec:: 'A vecnil))

(claim first-of-two
    (Pi ((E U))
        (-> (Vec E 2)
            E)))
(define first-of-two
    (lambda (E v)
        (head v)))

(first-of-two Atom (vec:: 'A (vec:: 'B vecnil)))

(claim first
    (Pi ((E U)
        (l Nat))
        (-> (Vec E (add1 l)) ; (first E 0) accepts a Vec length 1
            E)))
(define first
    (lambda (E l)
        (lambda (v)
            (head v))))

(first Atom 1 (vec:: 'A (vec:: 'B vecnil)))

; are lambda expressions really just special cases of Pi expressions?
; or: are Pi expressions really just generalized lambda expressions?

(claim incr-list3
    (Pi ((input (List Nat))) ; <name>:<type> listed in their own ()'s
        (List Nat)))

(define incr-list3
    (lambda (input)
        (rec-List input
            (make-empty-list Nat)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list3 (:: 1 (:: 2 (:: 3 nil))))

;------------------------------------------------------------------------------
; ch7: It All Depends on the Motive
;------------------------------------------------------------------------------

; cannot use rec-Nat! because base type parameter is static, but during recursion
; the type will always be changing (Vec Atom 0), (Vec Atom 1), ...

; recall rec-Nat takes "target", "base", "step"
; ind-Nat lets you use current target to specify the type of base, step
; the extra arg is given to a function (-> Nat U) called the motive
; entire ind-Nat type is the result of motive applied to top level target

; the step now maps from type (motive (n-1)) to (motive n)

; (ind-Nat
;   target
;   motive
;   base    <- has the type returned by (motive 0)
;   step    <- has the type returned by (motive <current>)
; )

; 0 -> (Vec Atom 0)
; 1 -> (Vec Atom 1)
; 2 -> (Vec Atom 2)
; ...
(claim mot-peas
    (-> Nat U)) ; function returns a type
(define mot-peas
    (lambda (k)
        (Vec Atom k))) ; function returns a type
'--------------------------------testing-mot-peas
(mot-peas 0) ; (Vec Atom 0)
(mot-peas 1) ; (Vec Atom 1)

; (Vec Atom 0) -> (Vec Atom 1)
; (Vec Atom 1) -> (Vec Atom 2)
; (Vec Atom 2) -> (Vec Atom 3)
; ...
(claim step-peas
    (Pi ((n Nat))
        (-> (mot-peas n) (mot-peas (add1 n))))) ; not only is step-peas's type dependent on n, it's
                                                ; dependent on the outcome of an expression involving n!
(define step-peas
    (lambda (n)
        (lambda (subresult)
            (vec:: 'pea subresult))))

(claim peas
    (Pi ((how-many-peas Nat))
        (Vec Atom how-many-peas)))
(define peas
    (lambda (how-many-peas)
        (ind-Nat how-many-peas
            mot-peas
            vecnil
            step-peas
        )))

'--------------------------------testing-peas

(peas 0)
(peas 1)
(peas 8)
(peas 16)

(head (peas 8))

(peas 8)
(tail (peas 8))
(tail (tail (peas 8)))
(tail (tail (tail (peas 8))))

; WRITE LAST (get the last element of a Vec)

; base is used when ind-Nat supplies 0

; return the base type we've decided, a function
; base case: a list of length 1's last element is its head
;
; input      output
; -----      ------
; Atom       (-> (Vec Atom 1) Atom)
; Nat        (-> (Vec Nat 1) Nat)
(claim base-last
    (Pi ((E U))
        (-> (Vec E 1) E)
    ))
(define base-last
    (lambda (E)
        (lambda (es)
            (head es))))
'--------------------------------testing-base-last
(base-last Atom)
(base-last Nat)

; given a Type and Nat [1,2,3,...], return a Type for step
;
; input  ind-Nat    output
; -----  -------    ------
; Atom   1          (-> (Vec Atom 2) Atom)
; Atom   2          (-> (Vec Atom 3) Atom)
; Atom   3          (-> (Vec Atom 4) Atom)
(claim mot-last (-> U Nat U))
(define mot-last
    (lambda (E)
        (lambda (k)
            (-> (Vec E (add1 k))
                E
            ))))

'--------------------------------testing-mot-last
(mot-last Atom 0)
(mot-last Atom 1)
(mot-last Atom 2)
(-> (mot-last Atom 0) (mot-last Atom 1))
;(the U
;  (→ (→ (Vec Atom 1)    the function whose input is type (-> (Vec Atom 1) Atom)
;        Atom)             returns a function whose input type is (Vec Atom 2)
;      (Vec Atom 2)          returns an Atom
;    Atom))

; convert a function returning the last of a (Vec E k)
;      to a function returning the last of a (Vec E (add1 k))
;
; (mot-last E k) is the input type to step-last
; (mot-last E (add1 k)) is the output type of step-last
;
;                             type
;          --------------------------------------------------
; ind-Nat  input                       output
; -------  ----------------------      ----------------------
; 0        (-> (Vec Atom 1) Atom)  ->  (-> (Vec Atom 2) Atom)
; 1        (-> (Vec Atom 2) Atom)  ->  (-> (Vec Atom 3) Atom)
; 2        (-> (Vec Atom 3) Atom)  ->  (-> (Vec Atom 4) Atom)
;
(claim step-last
    (Pi ((E U)      ; like Atom, Nat
        (k Nat))
        (-> (mot-last E k) (mot-last E (add1 k)))
        ;(-> (-> (Vec E (add1 k)) E)
        ;    (-> (Vec E (add1 (add1 k))) E)
        ;)
    )
)
(define step-last
    (lambda (E k)
        (lambda (subfunction)                   ; subfunction is a (-> (Vec E (add1 k)) E)
            (lambda (es)                        ;          es is a (-> (Vec E (add1 (add1 k)) E)
                (subfunction (tail es))))))     ;
'--------------------------------testing-step-last
(step-last Atom 1)
(step-last Atom 2)
(step-last Atom 3)

'--------------------------------testing-funky
;(step-last (Vec Atom 0)
;(base-last Atom)

; last doesn't actually process the vector
; it computes and returns a function that can be applied to the vector
;
(claim last ; takes a Type, a Nat, and returns
    (Pi ((E U) (l Nat))
        (-> (Vec E (add1 l))
            E)))
(define last
    (lambda (E l)
        (ind-Nat l      ; target
            (mot-last E)  ; motive
            (base-last E) ; base with type (mot 0)
            (step-last E) ; 
        )
    )
)
'--------------------------------testing-last
(last Atom 2 (vec:: 'A (vec:: 'B (vec:: 'C vecnil))))

; could a much simpler last have been made by detecting when the k is 0?

;(claim base-lastB
;    (Pi ((E U))
;    
;
;(claim lastB (-> U Nat U))
;(define lastB
;    (lambda (E k)
;        (ind-Nat l
;            (mot-lastB E)
;            (base-lastB E)
;            (step-lastB E)
;        )
;    )
;)
