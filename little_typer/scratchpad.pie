#lang pie

(claim sub1
    (-> Nat Nat))
(define sub1
    (lambda (x)
        (which-Nat x
            0
            (lambda (k) k))))

(check-same Nat (sub1 5) 4)
(check-same Nat (sub1 1) 0)
(check-same Nat (sub1 0) 0)

(claim -
    (-> Nat Nat
        Nat))
(define -
    (lambda (a b)
        (iter-Nat b
            a
            sub1)))

(claim Pear
    U)
(define Pear
    (Pair Nat Nat))

; (a,b) -> (a-1, b-1)
(claim sub1pear
    (-> Pear
        Pear))
(define sub1pear
    (lambda (x)
        (cons (sub1 (car x)) (sub1 (cdr x)))))

(check-same Pear (cons 2 3) (sub1pear (cons 3 4)))
(check-same Pear (cons 0 3) (sub1pear (cons 1 4)))
(check-same Pear (cons 0 3) (sub1pear (cons 0 4)))
(check-same Pear (cons 9 0) (sub1pear (cons 10 1)))
(check-same Pear (cons 9 0) (sub1pear (cons 10 0)))
(check-same Pear (cons 27 33) (sub1pear (cons 28 34)))

;
; (:: 1 (:: 2 (:: 3 nil)))
; (:: 0 (:: 1 (:: 2 (:: 3 nil))))

; Since nil is a (List Atom) and a (List Nat) and a (List x),
; how can we tell Pie which one we intend when supplying it to a function needing a base case?
;
; if we put just nil, Pie responds "Can't determine a type"

; technique #1: use "the" type hint:

(claim incr-list
    (-> (List Nat)
        (List Nat)
    )
)
(define incr-list
    (lambda (input)
        (rec-List input
            (the (List Nat) nil)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list (:: 1 (:: 2 (:: 3 nil))))

; technique #2: use a function that returns an empty list of the type we want:

(claim make-empty-list
    (Pi ((E U))
        (List E)))
(define make-empty-list
    (lambda (E)
        nil))

(claim incr-list2
    (-> (List Nat)
        (List Nat)
    )
)
(define incr-list2
    (lambda (input)
        (rec-List input
            (make-empty-list Nat)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list2 (:: 1 (:: 2 (:: 3 nil))))

;------------------------------------------------------------------------------
; ch6: Precisely How Many?
;------------------------------------------------------------------------------

; all type constructors we've seen so far take another type as a parameter:
;     (Pair Atom Nat)
;     (List Atom)
; but now they can take non-type stuff, like values of Nat

(the (Vec Atom 1) (vec:: 'A vecnil))
(the (Vec Atom 2) (vec:: 'A (vec:: 'B vecnil)))
(the (Vec Atom 3) (vec:: 'A (vec:: 'B (vec:: 'C vecnil))))

(claim first-of-one
    (Pi ((E U))
        (-> (Vec E 1)
            E)))
(define first-of-one
    (lambda (E v)
        (head v)))

(first-of-one Atom (vec:: 'A vecnil))

(claim first-of-two
    (Pi ((E U))
        (-> (Vec E 2)
            E)))
(define first-of-two
    (lambda (E v)
        (head v)))

(first-of-two Atom (vec:: 'A (vec:: 'B vecnil)))

(claim first
    (Pi ((E U)
        (l Nat))
        (-> (Vec E (add1 l)) ; (first E 0) accepts a Vec length 1
            E)))
(define first
    (lambda (E l)
        (lambda (v)
            (head v))))

(first Atom 1 (vec:: 'A (vec:: 'B vecnil)))

; are lambda expressions really just special cases of Pi expressions?
; or: are Pi expressions really just generalized lambda expressions?

(claim incr-list3
    (Pi ((input (List Nat))) ; <name>:<type> listed in their own ()'s
        (List Nat)))

(define incr-list3
    (lambda (input)
        (rec-List input
            (make-empty-list Nat)
            (lambda (e es subresult)
                (:: (add1 e) subresult))
        )
    )
)

(incr-list3 (:: 1 (:: 2 (:: 3 nil))))

;------------------------------------------------------------------------------
; ch7: It All Depends on the Motive
;------------------------------------------------------------------------------

; cannot use rec-Nat! because base type parameter is static, but during recursion
; the type will always be changing (Vec Atom 0), (Vec Atom 1), ...

; recall rec-Nat takes "target", "base", "step"
; ind-Nat lets you use current target to specify the type of base, step
; the extra arg is given to a function (-> Nat U) called the motive
; entire ind-Nat type is the result of motive applied to top level target

; the step now maps from type (motive (n-1)) to (motive n)

; (ind-Nat
;   target
;   motive
;   base    <- has the type returned by (motive 0)
;   step    <- has the type returned by (motive <current>)
; )

; 0 -> (Vec Atom 0)
; 1 -> (Vec Atom 1)
; 2 -> (Vec Atom 2)
; ...
(claim mot-peas
    (-> Nat U)) ; function returns a type
(define mot-peas
    (lambda (k)
        (Vec Atom k))) ; function returns a type

; (Vec Atom 0) -> (Vec Atom 1)
; (Vec Atom 1) -> (Vec Atom 2)
; (Vec Atom 2) -> (Vec Atom 3)
; ...
(claim step-peas
    (Pi ((n Nat))
        (-> (mot-peas n) (mot-peas (add1 n))))) ; not only is step-peas's type dependent on n, it's
                                                ; dependent on the outcoming of an expression involving n!
(define step-peas
    (lambda (n)
        (lambda (subresult)
            (vec:: 'pea subresult))))

(claim peas
    (Pi ((how-many-peas Nat))
        (Vec Atom how-many-peas)))
(define peas
    (lambda (how-many-peas)
        (ind-Nat how-many-peas
            mot-peas
            vecnil
            step-peas
        )))

(peas 0)
(peas 1)
(peas 8)
(peas 16)

; get-last?

; give the type for current count

; given a Type and Nat, return a Type
(claim mot-last (-> U Nat U))
; given a Type E and Nat k, return a function mapping (Vec E (add1 k)) to E
; examples return values:
; (-> (Vec Nat 5) Nat)
; (-> (Vec Atom 3) Nat)
(define mot-last
    (lambda (E)
        (lambda (k)
            (-> (Vec E (add1 k))
                E
            ))))

(mot-last Atom 4)
(mot-last Nat 4)
(mot-last (Pair Atom Atom) 4)

(claim step-last
    (Pi ((E U)
        (k Nat))
        (-> (mot-last E k) (mot-last E (add1 k)))))
        ;(-> (-> (Vec E k) E) (-> (Vec E (add1 k)) E) )))

(define step-last
    (lambda (E k)
        (lambda (subresult)
            (lambda (es)
                (subresult (tail es))))))
            

(claim base-last                ; base value we're returning is a FUNCTION
    (Pi ((E U))                 ; <-- parameterized type
        (-> (Vec E (add1 zero))
            E)))
(define base-last
    (lambda (E)
        (lambda (es)
            (head es))))


(claim last ; takes a Type, a Nat, and returns
    (Pi ((E U) (l Nat))
        (-> (Vec E (add1 l))
            E)))
(define last
    (lambda (E l)
        (ind-Nat l      ; target
            (mot-last E)  ; motive
            (base-last E) ; base with type (mot 0)
            (step-last E) ; 
        )
    )
)

(last Atom 2 (vec:: 'A (vec:: 'B (vec:: 'C vecnil))))
