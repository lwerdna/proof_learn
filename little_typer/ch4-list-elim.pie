#lang pie

;; Exercises on Pi types and using the List elimiator from Chapters 4 and 5
;; of The Little Typer
;;
;; Some exercises are adapted from assignments at Indiana University

;; Exercise 4.1
;;
;; Extend the definitions of kar and kdr (frame 4.42) so they work with arbirary
;; Pairs (instead of just for Pair Nat Nat).

(claim kar
	(Pi ((T1 U)
		  (T2 U))
		(-> (Pair T1 T2)
			T1)
	)
)

(define kar
	(lambda (T1 T2)
		(lambda (p)
			(car p)
		)
	)
)

(claim kdr
	(Pi ((T1 U)
		  (T2 U))
		(-> (Pair T1 T2)
			T2)
	)
)

(define kdr
	(lambda (T1 T2)
		(lambda (p)
			(cdr p)
		)
	)
)

(claim foo
	(Pair Nat Atom))
(define foo
	(cons 7 'days))

(check-same Nat (kar Nat Atom foo) 7)
(check-same Atom (kdr Nat Atom foo) 'days)

;;
;; Exercise 4.1 Variation - Using elim-Pair
;;

(claim elim-Pair
	(Pi ((A U)
		 (D U)
		(X U))
	(-> (Pair A D)
		(-> A D X)
			X )))

(define elim-Pair
	(lambda (A D X)
		(lambda (p f)
			(f (car p) (cdr p))
		)
	)
)

(claim kar2
	(Pi ((T1 U)
		  (T2 U))
		(-> (Pair T1 T2)
			T1)
	)
)

(define kar2
	(lambda (T1 T2)
		(lambda (p)
			(elim-Pair T1 ; input type0
					   T2 ; input type1
					   T1 ; return type
					   p  ; the pair
					   (lambda (a b)
					   		a
					   )
			)
		)
	)
)

(claim kdr2
	(Pi ((T1 U)
		  (T2 U))
		(-> (Pair T1 T2)
			T2)
	)
)

(define kdr2
	(lambda (T1 T2)
		(lambda (p)
			(elim-Pair T1 ; input type0
					   T2 ; input type1
					   T2 ; return type
					   p  ; the pair
					   (lambda (a b)
					   		b	
					   )
			)
		)
	)
)

(check-same Nat (kar2 Nat Atom foo) 7)
(check-same Atom (kdr2 Nat Atom foo) 'days)

;; Exercise 4.2
;;
;; Define a function called compose that takes (in addition to the type
;; arguments A, B, C) an argument of type (-> A B) and an argument of
;; type (-> B C) that and evaluates to a value of type (-> A C), the function
;; composition of the arguments.
